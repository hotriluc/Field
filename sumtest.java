import org.jfree.ui.RefineryUtilities;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;

public class sumtest {
public static void main(String[]args){

    /*for 1023*/
    //int arr[] = {};
    //int arr2[] = {};


    /*for 511*/
    //int arr[]  = {-1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1};
    //int arr2[] = {};

    /*for 127*/
    int arr[] ={1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1};
    int arr2[] ={1, 1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1};

    /*for 31*/
   // int arr[] = {-1, -1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1};
    //int arr2[] = {1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, 1};


    int p = 31;
    Signal s1 = new Signal(p);

    s1.setSignal(arr2);

    List<Integer> pereodic_cross_correl_list = s1.getPereodicCorrelList(arr,true);
    System.out.println("=================");
    int rmax = StatClass.getRmaxWO(pereodic_cross_correl_list, 127);
    System.out.println("\nRmax:" + rmax);


    List<int[]> list = s1.getListWithArrPereodic();
   System.out.println("\nList size:" + list.size());
   int cnt=0;

   //Перебор всех сигналво и подсчет пфвк
   for(int i = 0;i<list.size();i++){
      Signal s2 = new Signal(p);
      int []source_sig = list.get(i);
      for(int j = 0;j<list.size();j++){
         if(i<j){
         int []shift_sig = list.get(j);
            s2.setSignal(shift_sig);
            List<Integer> pereodic_cross_correl_list2 = s2.getPereodicCorrelList(source_sig,true);
            System.out.println();
            //System.out.println(Arrays.toString(shift_sig));
            int rmax2 = StatClass.getRmaxWO(pereodic_cross_correl_list2, 127);
           // System.out.println(rmax2);

             //для 1023 получилось rmax = 99
             //для 511 получилось rmax = 63
             //для 127 получилось rmax = 31
             ///
            if(rmax2<=99){
               cnt++;
               System.out.printf("Pair: %d , %d\n",i,j);
            }
         }else{continue;}

      }

   }

    /*
    //1 сигнал с остальными
        Signal s2 = new Signal(p);
        int []source_sig = arr2.clone();
        for(int j = 0;j<list.size();j++){

                int []shift_sig = list.get(j);
                s2.setSignal(shift_sig);
                List<Integer> pereodic_cross_correl_list2 = s2.getAutoCorrelList(source_sig);
                System.out.println();
                System.out.println(Arrays.toString(shift_sig));
                int rmax2 = StatClass.getRmaxWO(pereodic_cross_correl_list2, 1023);
                 System.out.println(rmax2);
                if(rmax2<=45){
                    cnt++;
                    System.out.printf("Pair: %d , %d\n",1,j);
                }
            }


    */

   System.out.println("Count: "+cnt);





}
}
